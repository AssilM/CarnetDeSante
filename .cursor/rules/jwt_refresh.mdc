---
description: 
globs: 
alwaysApply: true
---
- **Créer l'access-token avec la durée lue dans `process.env.ACCESS_TOKEN_EXPIRES`**
  - Fallback 900 s (15 min) max. Pas de valeur codée en dur ailleurs.

- **Générer le refresh-token avec une durée en texte (`"7d"` par défaut)**
  - Stocker en BDD (`refresh_token`) avec colonne `expires_at`.
  - Toujours envoyer le refresh-token dans un **cookie HTTP-Only sécurisé** (`jid`).

- **Endpoints obligatoires**
  - `POST /api/auth/refresh` (stateless, utilise le cookie)
  - `POST /api/auth/signout` (supprime BDD + cookie)

- **Sécurité du cookie**
  - Options : `httpOnly: true`, `secure: NODE_ENV==="production"`, `sameSite: "strict"`, `maxAge` aligné durée.

- **Compatibilité** : tolérer un refresh-token passé dans le body jusqu'à migration complète, mais NE JAMAIS l'exposer dans les réponses une fois le frontend ajusté.

```javascript
// ✅ DO – générer & poser le cookie
const refreshToken = jwt.sign({ id: user.id }, process.env.JWT_REFRESH_SECRET, { expiresIn: "7d" });
res.cookie("jid", refreshToken, {
  httpOnly: true,
  secure: process.env.NODE_ENV === "production",
  sameSite: "strict",
  maxAge: 7 * 24 * 60 * 60 * 1000,
});
```

