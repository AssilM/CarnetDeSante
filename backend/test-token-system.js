import {
  createUser,
  verifyEmailOTP,
  authenticateUser,
  sendLoginOTP,
  authenticateUserWithOTP,
} from "./src/auth/auth.service.js";
import {
  generateOTP,
  createToken,
  verifyAndConsumeToken,
  getActiveToken,
  cleanupExpiredTokens,
} from "./src/email/token.service.js";
import pool from "./src/config/db.js";

const testTokenSystem = async () => {
  try {
    console.log("üß™ Test du syst√®me de tokens OTP...\n");

    // 1. Test de g√©n√©ration d'OTP
    console.log("1Ô∏è‚É£ Test de g√©n√©ration d'OTP:");
    const otp = generateOTP();
    console.log("   ‚úÖ OTP g√©n√©r√©:", otp);
    console.log("   ‚úÖ Format correct:", /^\d{6}$/.test(otp));

    // 2. Test de cr√©ation d'utilisateur
    console.log("\n2Ô∏è‚É£ Test de cr√©ation d'utilisateur:");
    const testUserData = {
      email: "test-token@example.com",
      password: "password123",
      nom: "Test",
      prenom: "Token",
      date_naissance: "1990-01-01",
      role: "patient",
    };

    let userId;
    try {
      const newUser = await createUser(testUserData, "patient");
      userId = newUser.id;
      console.log("   ‚úÖ Utilisateur cr√©√©:", newUser.email);
      console.log("   ‚úÖ email_verified:", newUser.email_verified);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de l'inscription:", error.message);
      return;
    }

    // 3. Test de cr√©ation de token manuel
    console.log("\n3Ô∏è‚É£ Test de cr√©ation de token manuel:");
    try {
      const testOTP = "123456";
      const tokenResult = await createToken(
        userId,
        "EMAIL_VERIFY",
        testOTP,
        10
      );
      console.log("   ‚úÖ Token cr√©√©:", tokenResult);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de la cr√©ation du token:", error.message);
      return;
    }

    // 4. Test de v√©rification de token
    console.log("\n4Ô∏è‚É£ Test de v√©rification de token:");
    try {
      const isValid = await verifyAndConsumeToken(
        userId,
        "EMAIL_VERIFY",
        "123456"
      );
      console.log("   ‚úÖ Token v√©rifi√©:", isValid);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de la v√©rification:", error.message);
      return;
    }

    // 5. Test de v√©rification email avec OTP
    console.log("\n5Ô∏è‚É£ Test de v√©rification email:");
    try {
      const result = await verifyEmailOTP("test-token@example.com", "123456");
      console.log("   ‚úÖ Email v√©rifi√©:", result.message);
      console.log("   ‚úÖ User apr√®s v√©rification:", result.user.email_verified);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de la v√©rification email:", error.message);
      console.log(
        "   üí° Le token a peut-√™tre √©t√© consomm√© dans l'√©tape pr√©c√©dente"
      );
    }

    // 6. Test de connexion apr√®s v√©rification
    console.log("\n6Ô∏è‚É£ Test de connexion apr√®s v√©rification:");
    try {
      const authResult = await authenticateUser(
        "test-token@example.com",
        "password123"
      );
      console.log("   ‚úÖ Connexion r√©ussie!");
      console.log("   ‚úÖ Token pr√©sent:", !!authResult.accessToken);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de la connexion:", error.message);
    }

    // 7. Test d'envoi OTP pour connexion
    console.log("\n7Ô∏è‚É£ Test d'envoi OTP pour connexion:");
    try {
      const otpResult = await sendLoginOTP("test-token@example.com");
      console.log("   ‚úÖ OTP envoy√©:", otpResult.message);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de l'envoi OTP:", error.message);
    }

    // 8. Test de nettoyage des tokens expir√©s
    console.log("\n8Ô∏è‚É£ Test de nettoyage des tokens expir√©s:");
    try {
      const cleanedCount = await cleanupExpiredTokens();
      console.log("   ‚úÖ Tokens nettoy√©s:", cleanedCount);
    } catch (error) {
      console.log("   ‚ùå Erreur lors du nettoyage:", error.message);
    }

    console.log("\n‚úÖ Test du syst√®me de tokens termin√©!");
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error.message);
  } finally {
    await pool.end();
  }
};

testTokenSystem();
