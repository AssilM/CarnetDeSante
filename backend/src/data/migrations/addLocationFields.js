import pool from '../../config/db.js';

/**
 * Migration pour ajouter les champs de g√©olocalisation √† la table utilisateur
 * Sp√©cifiquement pour les m√©decins dans le contexte africain (Lom√©, Togo)
 */
const addLocationFieldsToUser = async () => {
  try {
    console.log('üîÑ D√©but de la migration : ajout des champs de g√©olocalisation...');

    // V√©rifier si les colonnes existent d√©j√†
    const checkColumnsQuery = `
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'utilisateur' 
      AND column_name IN ('latitude', 'longitude', 'description_localisation')
    `;
    
    const existingColumns = await pool.query(checkColumnsQuery);
    const existingColumnNames = existingColumns.rows.map(row => row.column_name);

    // Ajouter latitude si elle n'existe pas
    if (!existingColumnNames.includes('latitude')) {
      await pool.query(`
        ALTER TABLE utilisateur 
        ADD COLUMN latitude DECIMAL(10, 8)
      `);
      console.log('‚úÖ Colonne latitude ajout√©e');
    } else {
      console.log('‚ö†Ô∏è Colonne latitude existe d√©j√†');
    }

    // Ajouter longitude si elle n'existe pas
    if (!existingColumnNames.includes('longitude')) {
      await pool.query(`
        ALTER TABLE utilisateur 
        ADD COLUMN longitude DECIMAL(11, 8)
      `);
      console.log('‚úÖ Colonne longitude ajout√©e');
    } else {
      console.log('‚ö†Ô∏è Colonne longitude existe d√©j√†');
    }

    // Ajouter description_localisation si elle n'existe pas
    if (!existingColumnNames.includes('description_localisation')) {
      await pool.query(`
        ALTER TABLE utilisateur 
        ADD COLUMN description_localisation TEXT
      `);
      console.log('‚úÖ Colonne description_localisation ajout√©e');
    } else {
      console.log('‚ö†Ô∏è Colonne description_localisation existe d√©j√†');
    }

    // Ajouter des commentaires pour la documentation
    await pool.query(`
      COMMENT ON COLUMN utilisateur.latitude IS 'Latitude de la localisation (pour les m√©decins)'
    `);
    
    await pool.query(`
      COMMENT ON COLUMN utilisateur.longitude IS 'Longitude de la localisation (pour les m√©decins)'
    `);
    
    await pool.query(`
      COMMENT ON COLUMN utilisateur.description_localisation IS 'Description de la localisation (quartier, points de rep√®re) pour les m√©decins'
    `);

    console.log('‚úÖ Migration termin√©e avec succ√®s !');
    console.log('üìç Les m√©decins peuvent maintenant renseigner leur g√©olocalisation');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    throw error;
  }
};

// Fonction pour supprimer les champs (rollback)
const removeLocationFieldsFromUser = async () => {
  try {
    console.log('üîÑ Rollback : suppression des champs de g√©olocalisation...');

    // Supprimer les colonnes une par une
    const columns = ['latitude', 'longitude', 'description_localisation'];
    
    for (const column of columns) {
      try {
        await pool.query(`
          ALTER TABLE utilisateur 
          DROP COLUMN IF EXISTS ${column}
        `);
        console.log(`‚úÖ Colonne ${column} supprim√©e`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Erreur lors de la suppression de ${column}:`, error.message);
      }
    }

    console.log('‚úÖ Rollback termin√©');

  } catch (error) {
    console.error('‚ùå Erreur lors du rollback:', error);
    throw error;
  }
};

// Ex√©cuter la migration
const runMigration = async () => {
  const action = process.argv[2];
  
  try {
    if (action === 'rollback') {
      await removeLocationFieldsFromUser();
    } else {
      await addLocationFieldsToUser();
    }
  } catch (error) {
    console.error('Migration √©chou√©e:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
};

// Ex√©cuter si ce fichier est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  runMigration();
}

// Ex√©cuter la migration automatiquement
runMigration();

export { addLocationFieldsToUser, removeLocationFieldsFromUser };
