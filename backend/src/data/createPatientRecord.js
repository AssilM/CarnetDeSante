import pool from '../config/db.js';

const createPatientRecord = async () => {
  try {
    console.log('üîÑ Cr√©ation d\'un enregistrement patient pour l\'utilisateur de test...');
    
    // V√©rifier si l'utilisateur patient@gmail.com existe
    const userQuery = 'SELECT id FROM utilisateur WHERE email = $1';
    const userResult = await pool.query(userQuery, ['patient@gmail.com']);
    
    if (userResult.rows.length === 0) {
      console.log('‚ùå Utilisateur patient@gmail.com non trouv√©');
      return;
    }
    
    const userId = userResult.rows[0].id;
    console.log(`‚úÖ Utilisateur trouv√© avec ID: ${userId}`);
    
    // V√©rifier si l'enregistrement patient existe d√©j√†
    const patientCheckQuery = 'SELECT utilisateur_id FROM patient WHERE utilisateur_id = $1';
    const patientResult = await pool.query(patientCheckQuery, [userId]);
    
    if (patientResult.rows.length > 0) {
      console.log('‚úÖ Enregistrement patient existe d√©j√†');
      return;
    }
    
    // Cr√©er l'enregistrement patient
    const insertQuery = `
      INSERT INTO patient (utilisateur_id, groupe_sanguin, taille, poids)
      VALUES ($1, $2, $3, $4)
      RETURNING *
    `;
    
    const values = [userId, 'O+', 175, 70]; // Donn√©es par d√©faut
    const result = await pool.query(insertQuery, values);
    
    console.log('‚úÖ Enregistrement patient cr√©√©:', result.rows[0]);
    console.log('üéâ Script termin√© avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'enregistrement patient:', error);
  } finally {
    process.exit(0);
  }
};

// Ex√©cuter le script
createPatientRecord();
