import {
  createUser,
  verifyEmailOTP,
  authenticateUser,
  sendLoginOTP,
  authenticateUserWithOTP,
} from "./src/auth/auth.service.js";
import {
  generateOTP,
  createToken,
  verifyAndConsumeToken,
  cleanupExpiredTokens,
} from "./src/email/token.service.js";
import pool from "./src/config/db.js";

const testRoutesOTP = async () => {
  try {
    console.log("üß™ Test des routes OTP et authentification...\n");

    // 1. Test de cr√©ation d'utilisateur
    console.log("1Ô∏è‚É£ Test de cr√©ation d'utilisateur:");
    const testUserData = {
      email: "test-routes@example.com",
      password: "password123",
      nom: "Test",
      prenom: "Routes",
      date_naissance: "1990-01-01",
      role: "patient",
    };

    let userId;
    try {
      const newUser = await createUser(testUserData, "patient");
      userId = newUser.id;
      console.log("   ‚úÖ Utilisateur cr√©√©:", newUser.email);
      console.log("   ‚úÖ email_verified:", newUser.email_verified);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de l'inscription:", error.message);
      return;
    }

    // 2. Test de cr√©ation de token manuel pour v√©rification
    console.log("\n2Ô∏è‚É£ Test de cr√©ation de token pour v√©rification:");
    try {
      const testOTP = "123456";
      const tokenResult = await createToken(
        userId,
        "EMAIL_VERIFY",
        testOTP,
        10
      );
      console.log("   ‚úÖ Token cr√©√©:", tokenResult);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de la cr√©ation du token:", error.message);
      return;
    }

    // 3. Test de v√©rification email (simule la route /auth/verify-email)
    console.log("\n3Ô∏è‚É£ Test de v√©rification email (route /auth/verify-email):");
    try {
      const result = await verifyEmailOTP("test-routes@example.com", "123456");
      console.log("   ‚úÖ Email v√©rifi√©:", result.message);
      console.log("   ‚úÖ User apr√®s v√©rification:", result.user.email_verified);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de la v√©rification email:", error.message);
      console.log("   üí° Le token a peut-√™tre √©t√© consomm√©");
    }

    // 4. Test de connexion classique apr√®s v√©rification (simule la route /auth/signin)
    console.log("\n4Ô∏è‚É£ Test de connexion classique (route /auth/signin):");
    try {
      const authResult = await authenticateUser(
        "test-routes@example.com",
        "password123"
      );
      console.log("   ‚úÖ Connexion r√©ussie!");
      console.log("   ‚úÖ Token pr√©sent:", !!authResult.accessToken);
      console.log("   ‚úÖ User:", authResult.user.email);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de la connexion:", error.message);
    }

    // 5. Test d'envoi OTP pour connexion (simule la route /auth/login/request-otp)
    console.log(
      "\n5Ô∏è‚É£ Test d'envoi OTP connexion (route /auth/login/request-otp):"
    );
    try {
      const otpResult = await sendLoginOTP("test-routes@example.com");
      console.log("   ‚úÖ OTP envoy√©:", otpResult.message);
      console.log("   ‚úÖ Email confirm√©:", otpResult.email);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de l'envoi OTP:", error.message);
    }

    // 6. Test de cr√©ation de token pour connexion OTP
    console.log("\n6Ô∏è‚É£ Test de cr√©ation de token pour connexion OTP:");
    try {
      const loginOTP = "654321";
      const loginTokenResult = await createToken(
        userId,
        "OTP_LOGIN",
        loginOTP,
        10
      );
      console.log("   ‚úÖ Token de connexion cr√©√©:", loginTokenResult);
    } catch (error) {
      console.log(
        "   ‚ùå Erreur lors de la cr√©ation du token de connexion:",
        error.message
      );
      return;
    }

    // 7. Test de connexion avec OTP (simule la route /auth/login/verify-otp)
    console.log(
      "\n7Ô∏è‚É£ Test de connexion avec OTP (route /auth/login/verify-otp):"
    );
    try {
      const otpAuthResult = await authenticateUserWithOTP(
        "test-routes@example.com",
        "654321"
      );
      console.log("   ‚úÖ Connexion OTP r√©ussie!");
      console.log("   ‚úÖ Token pr√©sent:", !!otpAuthResult.accessToken);
      console.log("   ‚úÖ User:", otpAuthResult.user.email);
    } catch (error) {
      console.log("   ‚ùå Erreur lors de la connexion OTP:", error.message);
    }

    // 8. Test de nettoyage des tokens
    console.log("\n8Ô∏è‚É£ Test de nettoyage des tokens:");
    try {
      const cleanedCount = await cleanupExpiredTokens();
      console.log("   ‚úÖ Tokens nettoy√©s:", cleanedCount);
    } catch (error) {
      console.log("   ‚ùå Erreur lors du nettoyage:", error.message);
    }

    console.log("\n‚úÖ Test des routes OTP termin√©!");
    console.log("\nüìã R√âSUM√â DES ROUTES TEST√âES :");
    console.log("   ‚úÖ POST /auth/signup - Inscription");
    console.log("   ‚úÖ POST /auth/verify-email - V√©rification email");
    console.log("   ‚úÖ POST /auth/signin - Connexion classique");
    console.log("   ‚úÖ POST /auth/login/request-otp - Demande OTP connexion");
    console.log("   ‚úÖ POST /auth/login/verify-otp - Connexion avec OTP");
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error.message);
  } finally {
    await pool.end();
  }
};

testRoutesOTP();
